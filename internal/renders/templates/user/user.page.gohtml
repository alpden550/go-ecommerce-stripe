{{template "base" .}}

{{define "title"}}
    Admin User
{{end}}

{{define "content"}}
    <h2 class="mt-5 text-center">Admin User</h2>
    <hr>

    <div class="row">
        <div class="col-md-6 offset-md-3">
            <form action="" method="post" name="user-form" id="user_form" class="needs-validation" autocomplete="off"
                  novalidate>

                <div class="mb-3">
                    <label for="first_name" class="form-label">First Name</label>
                    <input type="text" class="form-control" id="first_name" name="first_name"
                           required="" autocomplete="first_name-new">
                </div>

                <div class="mb-3">
                    <label for="last_name" class="form-label">Last Name</label>
                    <input type="text" class="form-control" id="last_name" name="last_name"
                           required="" autocomplete="last_name-new">
                </div>

                <div class="mb-3">
                    <label for="email" class="form-label">Email</label>
                    <input type="email" class="form-control" id="email" name="email"
                           required="" autocomplete="email-new">
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <input type="password" class="form-control" id="password" name="password"
                           autocomplete="password-new">
                </div>

                <div class="mb-3">
                    <label for="password1" class="form-label">Verify Password</label>
                    <input type="password" class="form-control" id="password1" name="password1"
                           autocomplete="password1-new">
                </div>

                <hr>

                <div class="float-start">
                    <a href="/admin/users/all-users" class="btn btn-warning">Cancel</a>
                    <a id="save_btn" href="javascript:void(0)" class="btn btn-primary" onclick="val()">Save Changes</a>
                </div>
                <div class="float-end">
                    <a id="del_btn" href="javascript:void(0)" class="btn btn-danger d-none">Delete User</a>
                </div>

            </form>

        </div>
    </div>

{{end}}

{{define "js"}}
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        let token = localStorage.getItem("token");
        let id = window.location.pathname.split("/").pop();
        let form = document.getElementById("user_form");
        let delBtn = document.getElementById("del_btn");

        function val() {
            if (form.checkValidity() === false) {
                this.event.preventDefault();
                this.event.stopPropagation();
                form.classList.add("was-validated");
                return
            }

            form.classList.add("was-validated");
            let password = document.getElementById("password").value;
            let password1 = document.getElementById("password1").value;
            if (password !== password1) {
                Swal.fire("Passwords do not match")
                return
            }

            let payload = {
                id: parseInt(id, 10),
                first_name: document.getElementById("first_name").value,
                last_name: document.getElementById("last_name").value,
                email: document.getElementById("email").value,
                password: document.getElementById("password").value,
            }
            const requestOptions = {
                method: "post",
                headers: {
                    "Accept": "applications/json",
                    "Content-Type": "applications/json",
                    "Authorization": "Bearer " + token,
                },
                body: JSON.stringify(payload),
            }
            fetch("{{.API}}/api/admin/users/edit/" + id, requestOptions)
                .then(response => response.json())
                .then(function (data) {
                    if (data.error) {
                        Swal.fire("Error: " + data.message)
                    } else {
                        location.href = "/admin/users/all-users";
                    }
                })
        }

        document.addEventListener("DOMContentLoaded", async function () {
            if (id !== "0") {
                if (id !== "{{.UserID}}") {
                    delBtn.classList.remove("d-none");
                }
                const requestOptions = {
                    method: "get",
                    headers: {
                        "Accept": "applications/json",
                        "Content-Type": "applications/json",
                        "Authorization": "Bearer " + token,
                    }
                }
                const response = await fetch("{{.API}}/api/admin/users/" + id, requestOptions);
                const data = await response.json();
                if (!response.ok) {
                    form.innerHTML = "";
                    form.setAttribute("colspan", "2");
                    form.innerHTML = "No user found";
                    return
                }
                document.getElementById("first_name").value = data.first_name;
                document.getElementById("last_name").value = data.last_name;
                document.getElementById("email").value = data.email;
            }
        })

        delBtn.addEventListener("click", function () {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to undo this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Delete'
            }).then((result) => {
                if (result.isConfirmed) {
                    const requestOptions = {
                        method: "delete",
                        headers: {
                            "Accept": "applications/json",
                            "Content-Type": "applications/json",
                            "Authorization": "Bearer " + token,
                        }
                    }
                    fetch("{{.API}}/api/admin/users/delete/" + id, requestOptions)
                        .then(response => response.json())
                        .then(function (data) {
                            if (!data.ok) {
                                Swal.fire("Error: " + data.message);
                            } else {
                                let jsonData = {
                                    action: "deleteUser",
                                    user_id: parseInt(id, 10),
                                }

                                socket.send(JSON.stringify(jsonData));

                                location.href="/admin/users/all-users";
                            }
                        })
                }
            })
        })

    </script>
{{end}}
